{"version":3,"sources":["components/Node.jsx","algorithms/dijkstra.js","algorithms/dfs.js","algorithms/bfs.js","components/HeaderComponent.jsx","components/MainComponent.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","props","state","this","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","Dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","A","B","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","Dfs","srow","scol","frow","fcol","stack","x","pop","isSafe","helper","Bfs","Example","useState","isOpen","setIsOpen","disabled","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","Button","Reset","createNode","getNewGridWithWallToggled","newGrid","slice","newNode","Trailblazer","mousePressed","toChange","resetGrid","bind","visualizeDfs","visualizeBfs","currentRow","getInitialGrid","setState","i","document","getElementById","nodesInShortestPathOrder","setTimeout","animateShortestPath","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","animateDfs","animateBfs","visualizeDijkstra","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8d700097.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../App.css';\nexport default class Node extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        const {\n            col,\n            isFinish,\n            isStart,\n            isWall,\n            onMouseDown,\n            onMouseEnter,\n            onMouseUp,\n            row,\n        } = this.props;\n        const extraClassName = isFinish\n            ? 'node-finish'\n            : isStart\n                ? 'node-start'\n                : isWall\n                    ? 'node-wall'\n                    : '';\n\n        return (\n            <div\n                id={`node-${row}-${col}`}\n                className={`node ${extraClassName}`}\n                onMouseDown={() => onMouseDown(row, col)}\n                onMouseEnter={() => onMouseEnter(row, col)}\n                onMouseUp={() => onMouseUp()}></div>\n        );\n    }\n}","export function Dijkstra(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid);\n    while (unvisitedNodes.length) {\n        sortNodesByDistance(unvisitedNodes);\n        \n        const closestNode = unvisitedNodes.shift();\n        if (closestNode.isWall) continue;\n\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\n\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n\n        if (closestNode === finishNode) return visitedNodesInOrder;\n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((A, B) => A.distance - B.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n        neighbor.distance = node.distance + 1;\n        neighbor.previousNode = node;\n    }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const { col, row } = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}","export function Dfs(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    helper(grid, startNode.row, startNode.col, finishNode.row, finishNode.col, visitedNodesInOrder);\n    return visitedNodesInOrder;\n}\nfunction isSafe(grid,srow,scol) {\n    return srow >= 0 && srow < grid.length && scol >= 0 && scol < grid[0].length && !grid[srow][scol].isVisited&&!grid[srow][scol].isWall;\n}\nfunction helper(grid, srow, scol, frow, fcol, visitedNodesInOrder) {\n    const stack = [];\n    stack.push(grid[srow][scol]);\n    while (stack.length) {\n        const x = stack.pop();\n        if (x.row === frow && x.col === fcol) {\n            visitedNodesInOrder.push(x);\n            break;\n        }\n        visitedNodesInOrder.push(x);\n        x.isVisited = true;\n        if (isSafe(grid, x.row+1, x.col)) {\n            stack.push(grid[x.row+1][x.col]);\n        }\n        if (isSafe(grid, x.row, x.col - 1)) {\n            stack.push(grid[x.row][x.col - 1]);\n        }\n        if (isSafe(grid, x.row, x.col+1)) {\n            stack.push(grid[x.row][x.col+1]);\n        }\n        if (isSafe(grid, x.row-1, x.col)) {\n            stack.push(grid[x.row-1][x.col]);\n        }\n\n    }\n}","export function Bfs(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid);\n    while (unvisitedNodes.length) {\n        sortNodesByDistance(unvisitedNodes);\n\n        const closestNode = unvisitedNodes.shift();\n        if (closestNode.isWall) continue;\n\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\n\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n\n        if (closestNode === finishNode) return visitedNodesInOrder;\n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((A, B) => A.distance - B.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n        neighbor.distance = node.distance + 1;\n        neighbor.previousNode = node;\n    }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const { col, row } = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}","import React, { useState } from 'react';\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    Button\n} from 'reactstrap';\nconst Example = (props) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const disabled = props.disabled;\n    const toggle = () => setIsOpen(!isOpen);\n\n    return (\n        <div>\n            <Navbar color=\"dark\" light expand=\"md\">\n                <NavbarBrand href=\"/\" className=\"text-white\">Trailblazer Alpha</NavbarBrand>\n                <NavbarToggler onClick={toggle} />\n                <Collapse isOpen={isOpen} navbar>\n                    <Nav className=\"mr-auto\" navbar>\n                            <NavItem>\n                            <Button disabled={disabled} className=\"btn bg-transparent  text-white\" onClick={() => { props.Dijkstra();}}>Dijkstra</Button>\n                            </NavItem>\n                            <NavItem>\n                            <Button disabled={disabled} className=\"btn bg-transparent  text-white\" onClick={() => { props.Dfs();}}>Depth First Search</Button>\n                            </NavItem>\n                            <NavItem>\n                            <Button disabled={disabled} className=\"btn bg-transparent  text-white\" onClick={() => { props.Bfs();}}>Breadth First Search</Button>\n                            </NavItem>\n                            <NavItem>\n                            <Button disabled={disabled} className=\"btn bg-transparent  text-white\" onClick={() => props.Reset()}>Reset Grid</Button>\n                            </NavItem>\n                    </Nav>\n                </Collapse>\n            </Navbar>\n        </div>\n    );\n}\n\nexport default Example;","import React, { Component } from 'react';\nimport Node from './Node.jsx';\nimport '../App.css';\nimport { Dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\nimport { Dfs } from '../algorithms/dfs';\nimport { Bfs } from '../algorithms/bfs';\nimport Header from './HeaderComponent.jsx';\n\nconst S_NODE_ROW = 10;\nconst S_NODE_COL = 15;\nconst F_NODE_ROW = 10;\nconst F_NODE_COL = 35;\n\n\nconst getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row < 24; row++) {\n        const currentRow = [];\n        for (let col = 0; col < 50; col++) {\n            currentRow.push(createNode(row, col));\n        }\n        grid.push(currentRow);\n    }\n    return grid;\n};\n\nconst createNode = (row, col) => {\n    return {\n        col,\n        row,\n        isStart: row === S_NODE_ROW && col === S_NODE_COL,\n        isFinish: row === F_NODE_ROW && col === F_NODE_COL,\n        distance: Infinity,\n        isVisited: false,\n        isWall: false,\n        previousNode: null,\n    };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n        ...node,\n        isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n};\n\nexport default class Trailblazer extends Component{\n    constructor() {\n        super();\n        this.state = {\n            grid: [],\n            mousePressed: false,\n            toChange: null,\n            disabled:false,\n        };\n        this.resetGrid = this.resetGrid.bind(this);\n        this.visualizeDfs = this.visualizeDfs.bind(this);\n        this.visualizeBfs = this.visualizeBfs.bind(this);\n    }\n\n    resetGrid() {\n        const grid = getInitialGrid();\n        this.setState({ grid:grid,disabled: false });\n        const toChange = this.state.toChange;\n        if (toChange !== null) {\n            for (let i = 0; i < toChange.length; i++) {\n                const node = toChange[i];\n                if (node.row === S_NODE_ROW && node.col === S_NODE_COL) {\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-start';\n                }\n                else if (node.row === F_NODE_ROW && node.col === F_NODE_COL) {\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-finish';\n                }\n                else {\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\n                }\n            }\n        }\n        \n    }\n\n    componentDidMount() {\n        this.resetGrid();\n    }\n\n    handleMouseDown(row, col) {\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({ grid: newGrid, mousePressed: true });\n    }\n\n    handleMouseEnter(row, col) {\n        if (!this.state.mousePressed) return;\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({ grid: newGrid});\n    }\n\n    handleMouseUp() {\n        this.setState({ mousePressed: false });\n    }\n\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n        for (let i = 0; i <= visitedNodesInOrder.length; i++){\n            if (i === visitedNodesInOrder.length) {\n                setTimeout(() =>{\n                    this.animateShortestPath(nodesInShortestPathOrder);\n                }, 10 * i);\n                return;\n            }\n            setTimeout(() => {\n                const node = visitedNodesInOrder[i];\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n            }, 10 * i);\n        }\n    }\n\n    animateShortestPath(nodesInShortestPathOrder) {\n        for (let i = 0; i <= nodesInShortestPathOrder.length; i++){\n            if (i === nodesInShortestPathOrder.length) {\n                setTimeout(() => {\n                    this.setState({ disabled: !this.state.disabled });\n                }, 50 * i);\n                return;\n            }\n            setTimeout(() => {\n                const node = nodesInShortestPathOrder[i];\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n            }, 50 * i);\n        }\n    }\n\n    animateDfs(visitedNodesInOrder) {\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n            if (i === visitedNodesInOrder.length) {\n                setTimeout(() => {\n                    this.animateShortestPath(visitedNodesInOrder);\n                }, 10 * i);\n                return;\n            }\n            setTimeout(() => {\n                const node = visitedNodesInOrder[i];\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n            }, 10 * i);\n        }\n    }\n\n    visualizeDijkstra() {\n        const { grid } = this.state;\n        const startNode = grid[S_NODE_ROW][S_NODE_COL];\n        const finishNode = grid[F_NODE_ROW][F_NODE_COL];\n        const visitedNodesInOrder = Dijkstra(grid, startNode, finishNode);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        this.setState({ ...this.state, toChange: visitedNodesInOrder });\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n        this.setState({ disabled: !this.state.disabled });\n\n    }\n\n    visualizeDfs() {\n        const grid = this.state.grid;\n        const startNode = grid[S_NODE_ROW][S_NODE_COL];\n        const finishNode = grid[F_NODE_ROW][F_NODE_COL];\n        const visitedNodesInOrder = Dfs(grid, startNode, finishNode);\n        this.setState({ ...this.state, toChange: visitedNodesInOrder });\n        this.animateDfs(visitedNodesInOrder);\n        this.setState({ disabled: !this.state.disabled });\n    }\n\n    animateBfs(visitedNodesInOrder) {\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n            if (i === visitedNodesInOrder.length) {\n                setTimeout(() => {\n                    this.animateShortestPath(visitedNodesInOrder);\n                }, 10 * i);\n                return;\n            }\n            setTimeout(() => {\n                const node = visitedNodesInOrder[i];\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n            }, 10 * i);\n        }\n    }\n\n    visualizeBfs() {\n        const grid = this.state.grid;\n        const startNode = grid[S_NODE_ROW][S_NODE_COL];\n        const finishNode = grid[F_NODE_ROW][F_NODE_COL];\n        const visitedNodesInOrder = Bfs(grid, startNode, finishNode);\n        this.setState({ ...this.state, toChange: visitedNodesInOrder });\n        this.animateBfs(visitedNodesInOrder);\n        this.setState({ disabled: !this.state.disabled });   \n    }\n\n    render() {\n        const { grid, mousePressed } = this.state;\n        return (\n            <>\n                <Header Reset={this.resetGrid} Dijkstra={()=>this.visualizeDijkstra()} Dfs={this.visualizeDfs} Bfs={this.visualizeBfs} disabled={this.state.disabled} />\n                <div className=\"grid\" disabled={this.state.disabled}>\n                    {\n                        grid.map((row, rowIdx) => {\n                        return (\n                            <div key={rowIdx}className=\"row\">\n                                {\n                                    row.map((node, nodeIdx) => {\n                                        const { row, col, isFinish, isStart, isWall } = node;\n                                        return (\n                                            <Node\n                                                key={nodeIdx}\n                                                col={col}\n                                                isFinish={isFinish}\n                                                isStart={isStart}\n                                                isWall={isWall}\n                                                mousePressed={mousePressed}\n                                                onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                                                onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\n                                                onMouseUp={() => this.handleMouseUp()}\n                                                row={row}>\n                                            </Node>\n                                        );\n                                    })}\n                            </div>\n                        );\n                    })}\n                </div>\n            </>\n        );\n    }\n}","import MainComponent from './components/MainComponent';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainComponent/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}