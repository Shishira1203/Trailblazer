{"version":3,"sources":["algorithms/astar.js","components/Node.jsx","algorithms/dijkstra.js","algorithms/dfs.js","algorithms/bfs.js","shared/tb.jpeg","components/HeaderComponent.jsx","components/MainComponent.jsx","App.js","reportWebVitals.js","index.js"],"names":["shortestPathInOrderArray","Node","this","props","col","onMouseDown","onMouseEnter","onMouseUp","row","className","Component","visitedNodesInOrder","Dijkstra","grid","startNode","finishNode","splice","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","isWall","Infinity","isVisited","updateUnvisitedNeighbors","sort","A","B","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","Dfs","stack","x","pop","isSafe","helper","srow","scol","Bfs","findGraphNode","list","i","heuristicEuclidean","node1","node2","d1","Math","abs","d2","sqrt","heuristicDiagonal","max","heuristicManhattan","neighborss","ret","y","Example","useState","isOpen","setIsOpen","disabled","Navbar","color","light","expand","NavbarBrand","src","tb","alt","width","height","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","Button","Astar","Reset","Trailblazer","state","mousePressed","toChange","S_NODE_ROW","S_NODE_COL","F_NODE_ROW","F_NODE_COL","start","finish","visitedCount","shortestPathCount","timeComplexity","resetGrid","bind","visualizeDfs","visualizeBfs","visualizeAstar","visualizeDijkstra","currentRow","createNode","newGrid","slice","newNode","nxode","setState","getInitialGrid","change","ChangedNode","isStart","isFinish","handleStart","handleFinish","getNewGridWithWallToggled","nodesInShortestPathOrder","d","dfinal","setTimeout","animateShortestPath","resetOnlyVisited","Date","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","animateDfs","animateBfs","heuristic","selectedheuristic","f","g","h","openList","closedList","lowInd","k","curr","reverse","gScore","gScoreIsBest","animateAstar","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25d6857e.chunk.js","sourcesContent":["var shortestPathInOrderArray;\r\nexport function Astar(grid, startNode, finishNode,selectedheuristic) {\r\n    shortestPathInOrderArray = [startNode];\r\n    for (var x = 0; x < grid.length; x++) {\r\n        for (var y = 0; y < grid[x].length; y++) {\r\n            grid[x][y].f = 0;\r\n            grid[x][y].g = 0;\r\n            grid[x][y].h = 0;\r\n        }\r\n    }\r\n    const visitedNodesInOrder = [];\r\n    const openList = [], closedList = [];\r\n    openList.push(startNode);\r\n    visitedNodesInOrder.push(startNode);\r\n    while (openList.length) {\r\n        var lowInd = 0;\r\n        for (var k = 0; k < openList.length; k++){\r\n            if (openList[k].f < openList[lowInd].f) {\r\n                lowInd = k;\r\n            }\r\n        }\r\n        var currentNode = openList[lowInd];\r\n        if (currentNode.row === finishNode.row&&currentNode.col===finishNode.col) {\r\n            var curr = currentNode;\r\n            shortestPathInOrderArray.splice(0, shortestPathInOrderArray.length);\r\n            while (curr.previousNode) {\r\n                shortestPathInOrderArray.push(curr);\r\n                curr = curr.previousNode;\r\n            }\r\n            shortestPathInOrderArray.reverse();\r\n            shortestPathInOrderArray.unshift(startNode);\r\n            return visitedNodesInOrder;\r\n        }\r\n        openList.splice(lowInd, 1);\r\n        closedList.push(currentNode);\r\n        var neighbors = neighborss(grid, currentNode);\r\n\r\n        for (var i =0; i < neighbors.length; i++) {\r\n            var neighbor = neighbors[i];\r\n            if (findGraphNode(closedList,neighbor) || neighbor.isWall) {\r\n                continue;\r\n            }\r\n            var gScore = currentNode.g + 1;\r\n            var gScoreIsBest = false;\r\n\r\n            if (!findGraphNode(openList,neighbor)) {\r\n                gScoreIsBest = true;\r\n                if (selectedheuristic === \"Euclidean\") {\r\n                    neighbor.h = heuristicEuclidean(neighbor, finishNode);\r\n                }\r\n                else if (selectedheuristic === \"Manhattan\") {\r\n                    neighbor.h = heuristicManhattan(neighbor, finishNode);\r\n                }\r\n                else {\r\n                    neighbor.h = heuristicDiagonal(neighbor, finishNode);\r\n                }\r\n                openList.push(neighbor);\r\n                visitedNodesInOrder.push(neighbor);\r\n            }\r\n\r\n            else if (gScore < neighbor.g) {\r\n                gScoreIsBest = true;\r\n            }\r\n\r\n            if (gScoreIsBest) {\r\n                neighbor.previousNode = currentNode;\r\n                neighbor.g = gScore;\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n            }\r\n        }\r\n    }\r\n    return [startNode];\r\n}\r\nexport function shortestPathInOrder() {\r\n    return shortestPathInOrderArray;\r\n}\r\nfunction findGraphNode(list, node) {\r\n    for (var i = 0; i < list.length; i++){\r\n        if (list[i] === node) return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction heuristicEuclidean(node1, node2) {\r\n    var d1 = Math.abs(node1.row - node2.row);\r\n    var d2 = Math.abs(node1.col - node2.col);\r\n    return Math.sqrt(d1*d1 + d2*d2);\r\n}\r\n\r\nfunction heuristicDiagonal(node1, node2) {\r\n    var d1 = Math.abs(node1.row - node2.row);\r\n    var d2 = Math.abs(node1.col - node2.col);\r\n    return Math.max(d1,d2);\r\n}\r\n\r\nfunction heuristicManhattan(node1, node2) {\r\n    var d1 = Math.abs(node1.row - node2.row);\r\n    var d2 = Math.abs(node1.col - node2.col);\r\n    return d1 + d2;\r\n}\r\n\r\nfunction neighborss(grid, node) {\r\n    var ret = [];\r\n    var x = node.row;\r\n    var y = node.col;\r\n\r\n    if (grid[x - 1] && grid[x - 1][y]) {\r\n        ret.push(grid[x - 1][y]);\r\n    }\r\n    if (grid[x + 1] && grid[x + 1][y]) {\r\n        ret.push(grid[x + 1][y]);\r\n    }\r\n    if (grid[x][y - 1] && grid[x][y - 1]) {\r\n        ret.push(grid[x][y - 1]);\r\n    }\r\n    if (grid[x][y + 1] && grid[x][y + 1]) {\r\n        ret.push(grid[x][y + 1]);\r\n    }\r\n    return ret;\r\n}","import React, { Component } from 'react';\r\nimport '../App.css';\r\nexport default class Node extends Component {\r\n    render() {\r\n        const {\r\n            col,\r\n            onMouseDown,\r\n            onMouseEnter,\r\n            onMouseUp,\r\n            row,\r\n            className\r\n        } = this.props;\r\n\r\n        return (\r\n            <div\r\n                className={className}\r\n                onMouseDown={() => onMouseDown(row, col)}\r\n                onMouseEnter={() => onMouseEnter(row, col)}\r\n                onMouseUp={() => onMouseUp()}></div>\r\n        );\r\n    }\r\n}","const visitedNodesInOrder = [];\r\nexport function Dijkstra(grid, startNode, finishNode) {\r\n    visitedNodesInOrder.splice(0);\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while (unvisitedNodes.length) {\r\n        sortNodesByDistance(unvisitedNodes);\r\n        \r\n        const closestNode = unvisitedNodes.shift();\r\n        if (closestNode.isWall) continue;\r\n\r\n        if (closestNode.distance === Infinity){\r\n            visitedNodesInOrder.splice(0);\r\n            visitedNodesInOrder.push(startNode);\r\n            return visitedNodesInOrder;\r\n        }\r\n\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n\r\n        if (closestNode === finishNode) return visitedNodesInOrder;\r\n        updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((A, B) => A.distance - B.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n        neighbor.distance = node.distance + 1;\r\n        neighbor.previousNode = node;\r\n    }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const { col, row } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            nodes.push(node);\r\n        }\r\n    }\r\n    return nodes;\r\n}\r\n\r\nexport function getNodesInShortestPathOrder(startNode,finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    if(finishNode!==visitedNodesInOrder[visitedNodesInOrder.length-1]){\r\n        nodesInShortestPathOrder.push(startNode);\r\n        return nodesInShortestPathOrder;\r\n    }\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}","export function Dfs(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    helper(grid, startNode, finishNode, visitedNodesInOrder);\r\n    return visitedNodesInOrder;\r\n}\r\nfunction isSafe(grid,srow,scol) {\r\n    return srow >= 0 && srow < grid.length && scol >= 0 && scol < grid[0].length && !grid[srow][scol].isVisited&&!grid[srow][scol].isWall;\r\n}\r\nfunction helper(grid, startNode, finishNode, visitedNodesInOrder) {\r\n    const stack = [];\r\n    stack.push(grid[startNode.row][startNode.col]);\r\n    while (stack.length) {\r\n        const x = stack.pop();\r\n        if (x.row===finishNode.row&&x.col===finishNode.col) {\r\n            visitedNodesInOrder.push(x);\r\n            break;\r\n        }\r\n        x.isVisited = true;\r\n        visitedNodesInOrder.push(x);\r\n        if (isSafe(grid, x.row+1, x.col)) {\r\n            stack.push(grid[x.row+1][x.col]);\r\n        }\r\n        if (isSafe(grid, x.row, x.col - 1)) {\r\n            stack.push(grid[x.row][x.col - 1]);\r\n        }\r\n        if (isSafe(grid, x.row, x.col+1)) {\r\n            stack.push(grid[x.row][x.col+1]);\r\n        }\r\n        if (isSafe(grid, x.row-1, x.col)) {\r\n            stack.push(grid[x.row-1][x.col]);\r\n        }\r\n    }\r\n}","export function Bfs(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while (unvisitedNodes.length) {\r\n        sortNodesByDistance(unvisitedNodes);\r\n\r\n        const closestNode = unvisitedNodes.shift();\r\n        if (closestNode.isWall) continue;\r\n\r\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n\r\n        if (closestNode === finishNode) return visitedNodesInOrder;\r\n        updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((A, B) => A.distance - B.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n        neighbor.distance = node.distance + 1;\r\n        neighbor.previousNode = node;\r\n    }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const { col, row } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            nodes.push(node);\r\n        }\r\n    }\r\n    return nodes;\r\n}","export default __webpack_public_path__ + \"static/media/tb.e5d7322e.jpeg\";","import React, { useState } from 'react';\r\nimport  tb from '../shared/tb.jpeg';\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    Nav,\r\n    NavItem,\r\n    Button,\r\n    NavbarBrand\r\n} from 'reactstrap';\r\nconst Example = (props) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const disabled = props.disabled;\r\n    const toggle = () => setIsOpen(!isOpen);\r\n\r\n    return (\r\n        <div>\r\n            <Navbar color=\"dark\" light expand=\"md\">\r\n                <NavbarBrand className=\"text-white\"><img src={tb} alt=\"logo\" width=\"40\" height=\"40\"></img>Trailblazer</NavbarBrand>\r\n                <NavbarToggler onClick={toggle} />\r\n                <Collapse isOpen={isOpen} navbar>\r\n                    <Nav className=\"mr-auto\" navbar>\r\n                        <NavItem>\r\n                            <Button disabled={disabled} className=\"btn bg-transparent  text-white\" onClick={() => { props.Dijkstra(); }}>Dijkstra</Button>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <Button disabled={disabled} className=\"btn bg-transparent  text-white\" onClick={() => { props.Dfs(); }}>Depth First Search</Button>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <Button disabled={disabled} className=\"btn bg-transparent  text-white\" onClick={() => { props.Bfs(); }}>Breadth First Search</Button>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <Button disabled={disabled} className=\"btn bg-transparent  text-white\" onClick={() => { props.Astar(\"Euclidean\"); }}>Astar Euclidean</Button>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <Button disabled={disabled} className=\"btn bg-transparent  text-white\" onClick={() => { props.Astar(\"Manhattan\"); }}>Astar Manhattan</Button>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <Button disabled={disabled} className=\"btn bg-transparent  text-white\" onClick={() => { props.Astar(\"Diagonal\"); }}>Astar Diagonal</Button>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <Button disabled={disabled} className=\"btn bg-transparent  text-white\" onClick={() => props.Reset()}>Reset Grid</Button>\r\n                        </NavItem>\r\n                    </Nav>\r\n                </Collapse>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Example;","import React, { Component } from 'react';\r\nimport Node from './Node.jsx';\r\nimport '../App.css';\r\nimport { Dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\r\nimport { Dfs } from '../algorithms/dfs';\r\nimport { Bfs } from '../algorithms/bfs';\r\nimport { Astar, shortestPathInOrder } from '../algorithms/astar';\r\nimport Header from './HeaderComponent.jsx';\r\n\r\nexport default class Trailblazer extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            grid: [],\r\n            mousePressed: false,\r\n            toChange: null,\r\n            disabled: false,\r\n            S_NODE_ROW: 10,\r\n            S_NODE_COL: 15,\r\n            F_NODE_ROW: 10,\r\n            F_NODE_COL: 36,\r\n            start: false,\r\n            finish: false,\r\n            visitedCount: 0,\r\n            shortestPathCount:0,\r\n            timeComplexity:0,\r\n        };\r\n        this.resetGrid = this.resetGrid.bind(this);\r\n        this.visualizeDfs = this.visualizeDfs.bind(this);\r\n        this.visualizeBfs = this.visualizeBfs.bind(this);\r\n        this.visualizeAstar = this.visualizeAstar.bind(this);\r\n        this.visualizeDijkstra = this.visualizeDijkstra.bind(this);\r\n    }\r\n\r\n    createNode(row, col) {\r\n        return {\r\n            col,\r\n            row,\r\n            className:'node',\r\n            distance: Infinity,\r\n            isVisited: false,\r\n            isWall: false,\r\n            previousNode: null,\r\n        };\r\n    };\r\n\r\n    getInitialGrid(){\r\n        const grid = [];\r\n        for (let row = 0; row < 20; row++) {\r\n            const currentRow = [];\r\n            for (let col = 0; col < 55; col++) {\r\n                currentRow.push(this.createNode(row, col));\r\n            }\r\n            grid.push(currentRow);\r\n        }\r\n        grid[this.state.S_NODE_ROW][this.state.S_NODE_COL].className = 'node node-start';\r\n        grid[this.state.F_NODE_ROW][this.state.F_NODE_COL].className = 'node node-finish';\r\n        return grid;\r\n    };\r\n\r\n    getNewGridWithWallToggled(row, col){\r\n        const newGrid = this.state.grid.slice();\r\n        const node = newGrid[row][col];\r\n        if (row === this.state.S_NODE_ROW && col === this.state.S_NODE_COL) return newGrid;\r\n        if (row === this.state.F_NODE_ROW && col === this.state.F_NODE_COL) return newGrid;\r\n        const newNode = {\r\n            ...node,\r\n            isWall: !node.isWall,\r\n            isVisited:false,\r\n            className: node.isWall?'node':'node node-wall',\r\n        };\r\n        newGrid[row][col] = newNode;\r\n        return newGrid;\r\n    };\r\n\r\n    resetOnlyVisited() {\r\n        const { toChange, grid } = this.state;\r\n        const newGrid = grid.slice();\r\n        if (toChange !== null) {\r\n            for (let i = 0; i < toChange.length; i++) {\r\n                const node = toChange[i];\r\n                if (node.row===this.state.S_NODE_ROW&&node.col===this.state.S_NODE_COL) {\r\n                    const nxode = grid[node.row][node.col];\r\n                    const newNode = {\r\n                        ...nxode,\r\n                        isVisited: false,\r\n                        className: 'node node-start'\r\n                    };\r\n                    newGrid[node.row][node.col] = newNode;\r\n                }\r\n                else if (node.row === this.state.F_NODE_ROW && node.col === this.state.F_NODE_COL) {\r\n                    const nxode = grid[node.row][node.col];\r\n                    const newNode = {\r\n                        ...nxode,\r\n                        isVisited: false,\r\n                        className: 'node node-finish'\r\n                    };\r\n                    newGrid[node.row][node.col] = newNode;\r\n                }\r\n                else if (grid[node.row][node.col].isWall){\r\n                    const nxode = grid[node.row][node.col];\r\n                    const newNode = {\r\n                        ...nxode,\r\n                        isVisited: false,\r\n                        isWall: true,\r\n                        className: 'node node-wall'\r\n                    };\r\n                    newGrid[node.row][node.col] = newNode;\r\n                }\r\n                else {\r\n                    const nxode = grid[node.row][node.col];\r\n                    const newNode = {\r\n                        ...nxode,\r\n                        isVisited: false,\r\n                        className: 'node'\r\n                    };\r\n                    newGrid[node.row][node.col] = newNode;\r\n                }\r\n            }\r\n            for (const row of grid) {\r\n                for (const node of row) {\r\n                    node.distance = Infinity;\r\n                }\r\n            }\r\n        }\r\n        this.setState({ grid: newGrid, toChange: null, visitedCount: 0, shortestPathCount: 0,timeComplexity:0 });\r\n    }\r\n\r\n\r\n    resetGrid() {\r\n        const grid = this.getInitialGrid();\r\n        this.setState({ grid: grid, disabled: false,visitedCount:0,shortestPathCount:0,timeComplexity:0});\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetGrid();\r\n    }\r\n\r\n    handleStart(grid,row, col) {\r\n        const newGrid = grid.slice();\r\n        const change = newGrid[this.state.S_NODE_ROW][this.state.S_NODE_COL];\r\n        const ChangedNode = {\r\n            ...change,\r\n            isVisited:false,\r\n            isStart: false,\r\n            className:'node'\r\n        }\r\n        newGrid[this.state.S_NODE_ROW][this.state.S_NODE_COL] = ChangedNode;\r\n        const node = grid[row][col];\r\n        const newNode = {\r\n            ...node,\r\n            isVisited:false,\r\n            isStart: true,\r\n            className:'node node-start'\r\n        };\r\n        this.setState({ S_NODE_ROW: row, S_NODE_COL: col });\r\n        newGrid[row][col] = newNode;\r\n        return newGrid;\r\n    }\r\n\r\n    handleFinish(grid, row, col) {\r\n        const newGrid = grid.slice();\r\n        const change = newGrid[this.state.F_NODE_ROW][this.state.F_NODE_COL];\r\n        const ChangedNode = {\r\n            ...change,\r\n            isVisited:false,\r\n            isFinish: false,\r\n            className: 'node'\r\n        }\r\n        newGrid[this.state.F_NODE_ROW][this.state.F_NODE_COL] = ChangedNode;\r\n        const node = grid[row][col];\r\n        const newNode = {\r\n            ...node,\r\n            isFinish: true,\r\n            className:'node node-finish'\r\n        };\r\n        this.setState({ F_NODE_ROW: row, F_NODE_COL: col });\r\n        newGrid[row][col] = newNode;\r\n        return newGrid;\r\n    }\r\n\r\n    handleMouseDown(row, col) {\r\n        if (row===this.state.S_NODE_ROW&&col===this.state.S_NODE_COL) {\r\n            this.setState({ start: true });\r\n        }\r\n        if (row===this.state.F_NODE_ROW&&col===this.state.F_NODE_COL) {\r\n            this.setState({ finish: true });\r\n        }\r\n        const newGrid = this.state.start?this.handleStart(this.state.grid,row,col):this.state.finish?this.handleFinish(this.state.grid,row,col):this.getNewGridWithWallToggled(row, col);\r\n        this.setState({ grid: newGrid, mousePressed: true });\r\n    }\r\n\r\n    handleMouseEnter(row, col) {\r\n        if (!this.state.mousePressed||(row===this.state.S_NODE_ROW&&col===this.state.S_NODE_COL)||(row===this.state.F_NODE_ROW&&col===this.state.F_NODE_COL)) return;\r\n        const newGrid = this.state.start ? this.handleStart(this.state.grid, row, col) : this.state.finish ? this.handleFinish(this.state.grid, row, col) : this.getNewGridWithWallToggled( row, col);\r\n        this.setState({ grid: newGrid });\r\n    }\r\n\r\n    handleMouseUp() {\r\n        this.setState({ mousePressed: false, start: false, finish: false });\r\n    }\r\n\r\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder,d,dfinal) {\r\n        const newGrid = this.state.grid.slice();\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    this.animateShortestPath(nodesInShortestPathOrder,d,dfinal);\r\n                }, 10 * i);\r\n                return;\r\n            }\r\n            setTimeout(() => {\r\n                const node = visitedNodesInOrder[i];\r\n                const nxode = newGrid[node.row][node.col];\r\n                const newNode = {\r\n                    ...nxode,\r\n                    previousNode: null,\r\n                    distance:Infinity,\r\n                    className: i===0?'node node-start-visited':i===visitedNodesInOrder.length-1?'node node-finish-visited':'node node-visited'\r\n                };\r\n                newGrid[node.row][node.col] = newNode;\r\n                this.setState({ grid: newGrid, visitedCount: this.state.visitedCount + 1 });\r\n            }, 10 * i);\r\n        }\r\n    }\r\n\r\n    animateShortestPath(nodesInShortestPathOrder,d,dfinal) {\r\n        const newGrid = this.state.grid.slice();\r\n        for (let i = 0; i <= nodesInShortestPathOrder.length; i++) {\r\n            if (i === nodesInShortestPathOrder.length) {\r\n                setTimeout(() => {\r\n                    this.setState({ disabled: !this.state.disabled,timeComplexity:dfinal-d});\r\n                }, 50 * i);\r\n                return;\r\n            }\r\n            setTimeout(() => {\r\n                const node = nodesInShortestPathOrder[i];\r\n                const nxode = newGrid[node.row][node.col];\r\n                const newNode = {\r\n                    ...nxode,\r\n                    previousNode: null,\r\n                    distance:Infinity,\r\n                    className: i===0?'node node-start-shortest-path':i===nodesInShortestPathOrder.length-1?'node node-finish-shortest-path':'node node-shortest-path'\r\n                };\r\n                newGrid[node.row][node.col] = newNode;\r\n                this.setState({ grid: newGrid,shortestPathCount:this.state.shortestPathCount+1 });\r\n            }, 50 * i);\r\n        }\r\n    }\r\n\r\n    animateDfs(visitedNodesInOrder,d,dfinal) {\r\n        const newGrid = this.state.grid.slice();\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    this.animateShortestPath(visitedNodesInOrder,d,dfinal);\r\n                }, 10 * i);\r\n                return;\r\n            }\r\n            setTimeout(() => {\r\n                const node = visitedNodesInOrder[i];\r\n                const nxode = newGrid[node.row][node.col];\r\n                const newNode = {\r\n                    ...nxode,\r\n                    className: i === 0 ? 'node node-start-visited' : i === visitedNodesInOrder.length - 1 ? 'node node-finish-visited' : 'node node-visited'\r\n                };\r\n                newGrid[node.row][node.col] = newNode;\r\n                this.setState({ grid: newGrid,visitedCount:this.state.visitedCount+1 });\r\n            }, 10 * i);\r\n        }\r\n    }\r\n\r\n    visualizeDijkstra() {\r\n        const { grid } = this.state;\r\n        this.resetOnlyVisited();\r\n        const startNode = grid[this.state.S_NODE_ROW][this.state.S_NODE_COL];\r\n        const finishNode = grid[this.state.F_NODE_ROW][this.state.F_NODE_COL];\r\n        var d=new Date()/1000;\r\n        const visitedNodesInOrder = Dijkstra(grid, startNode, finishNode);\r\n        var dfinal=new Date()/1000;\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(startNode,finishNode);\r\n        this.setState({ ...this.state, toChange: visitedNodesInOrder, visitedCount: 0, shortestPathCount: 0, disabled: !this.state.disabled, mousePressed: false,timeComplexity:0});\r\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder,d,dfinal);\r\n    }\r\n\r\n    visualizeDfs() {\r\n        this.resetOnlyVisited();\r\n        this.setState({timeComplexity:0});\r\n        const { grid } = this.state;\r\n        const startNode = grid[this.state.S_NODE_ROW][this.state.S_NODE_COL];\r\n        const finishNode = grid[this.state.F_NODE_ROW][this.state.F_NODE_COL];\r\n        var d=new Date()/1000;\r\n        const visitedNodesInOrder = Dfs(grid, startNode, finishNode);\r\n        var dfinal=new Date()/1000;\r\n        this.setState({ ...this.state, toChange: visitedNodesInOrder, visitedCount: 0, shortestPathCount: 0, disabled: !this.state.disabled, mousePressed: false,timeComplexity:0  });\r\n        this.animateDfs(visitedNodesInOrder,d,dfinal);\r\n    }\r\n\r\n    animateBfs(visitedNodesInOrder,d,dfinal) {\r\n        const newGrid = this.state.grid.slice();\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    this.animateShortestPath(visitedNodesInOrder,d,dfinal);\r\n                }, 10 * i);\r\n                this.setState({ grid: newGrid });\r\n                return;\r\n            }\r\n            setTimeout(() => {\r\n                const node = visitedNodesInOrder[i];\r\n                const nxode = newGrid[node.row][node.col];\r\n                const newNode = {\r\n                    ...nxode,\r\n                    className: i === 0 ? 'node node-start-visited' : i === visitedNodesInOrder.length - 1 ? 'node node-finish-visited' : 'node node-visited'\r\n                };\r\n                newGrid[node.row][node.col] = newNode;\r\n                this.setState({ grid: newGrid, visitedCount: this.state.visitedCount + 1 });\r\n            }, 10 * i);\r\n        }\r\n    }\r\n\r\n    visualizeBfs() {\r\n        this.resetOnlyVisited();\r\n        const grid = this.state.grid;\r\n        const startNode = grid[this.state.S_NODE_ROW][this.state.S_NODE_COL];\r\n        const finishNode = grid[this.state.F_NODE_ROW][this.state.F_NODE_COL];\r\n        var d=new Date()/1000;\r\n        const visitedNodesInOrder = Bfs(grid, startNode, finishNode);\r\n        var dfinal=new Date()/1000;\r\n        this.setState({ toChange: visitedNodesInOrder, visitedCount: 0, shortestPathCount: 0, disabled: !this.state.disabled, mousePressed: false });\r\n        this.animateBfs(visitedNodesInOrder,d,dfinal);\r\n    }\r\n\r\n    animateAstar(visitedNodesInOrder, nodesInShortestPathOrder,d, dfinal) {\r\n        const newGrid = this.state.grid.slice();\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    this.animateShortestPath(nodesInShortestPathOrder,d,dfinal);\r\n                }, 10 * i);\r\n                return;\r\n            }\r\n            setTimeout(() => {\r\n                const node = visitedNodesInOrder[i];\r\n                const nxode = newGrid[node.row][node.col];\r\n                if (node.row === this.state.F_NODE_ROW && node.col === this.state.F_NODE_COL) {\r\n                    const newNode = {\r\n                        ...nxode,\r\n                        className: 'node node-finish-visited'\r\n                    };\r\n                    newGrid[node.row][node.col] = newNode;\r\n                    this.setState({ grid: newGrid, visitedCount: this.state.visitedCount + 1 });\r\n                }\r\n                else {\r\n                    const newNode = {\r\n                        ...nxode,\r\n                        className: i === 0 ? 'node node-start-visited' : 'node node-visited'\r\n                    };\r\n                    newGrid[node.row][node.col] = newNode;\r\n                    this.setState({ grid: newGrid, visitedCount: this.state.visitedCount + 1 });\r\n                }\r\n            }, 10 * i);\r\n        }\r\n    }\r\n\r\n\r\n    visualizeAstar(heuristic) {\r\n        this.resetOnlyVisited();\r\n        const grid = this.state.grid;\r\n        const startNode = grid[this.state.S_NODE_ROW][this.state.S_NODE_COL];\r\n        const finishNode = grid[this.state.F_NODE_ROW][this.state.F_NODE_COL];\r\n        var d=new Date()/1000;\r\n        const visitedNodesInOrder = Astar(grid, startNode, finishNode,heuristic);\r\n        var dfinal=new Date()/1000;\r\n        const nodesInShortestPathOrder = shortestPathInOrder();\r\n        this.setState({ toChange: visitedNodesInOrder, visitedCount: 0, shortestPathCount: 0, disabled: !this.state.disabled, mousePressed: false  });\r\n        this.animateAstar(visitedNodesInOrder, nodesInShortestPathOrder,d,dfinal);\r\n    }\r\n\r\n    render() {\r\n        const { grid, mousePressed,visitedCount,shortestPathCount,disabled,timeComplexity } = this.state;\r\n        return (\r\n            <>\r\n                <Header Reset={this.resetGrid} Dijkstra={() => this.visualizeDijkstra()} Dfs={this.visualizeDfs} Bfs={this.visualizeBfs} Astar={(heuristic)=>this.visualizeAstar(heuristic)} disabled={this.state.disabled} />\r\n                <div className=\"container\">\r\n                    <div>Visited Nodes Count: {visitedCount}</div>\r\n                    <div>Shortest Path Nodes Count: {shortestPathCount}</div>\r\n                    <div>Time Complexity of the algorithm:{timeComplexity}ms</div>\r\n                </div>\r\n                \r\n                <div className=\"grid\" disabled={disabled}>\r\n                    {\r\n                        grid.map((row, rowIdx) => {\r\n                            return (\r\n                                <div key={rowIdx} className=\"row\">\r\n                                    {\r\n                                        row.map((node, nodeIdx) => {\r\n                                            const { row, col, isWall,className } = node;\r\n                                            return (\r\n                                                <Node\r\n                                                    className={className}\r\n                                                    key={nodeIdx}\r\n                                                    col={col}\r\n                                                    isWall={isWall}\r\n                                                    mousePressed={mousePressed}\r\n                                                    onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                                                    onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\r\n                                                    onMouseUp={() => this.handleMouseUp()}\r\n                                                    row={row}>\r\n                                                </Node>\r\n                                            );\r\n                                        })}\r\n                                </div>\r\n                            );\r\n                        })}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}","import MainComponent from './components/MainComponent';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.css';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <MainComponent/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}