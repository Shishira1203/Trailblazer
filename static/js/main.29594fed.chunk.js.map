{"version":3,"sources":["algorithms/astar.js","components/Node.jsx","algorithms/dijkstra.js","algorithms/dfs.js","algorithms/bfs.js","components/HeaderComponent.jsx","components/MainComponent.jsx","App.js","reportWebVitals.js","index.js"],"names":["shortestPathInOrderArray","Node","this","props","col","onMouseDown","onMouseEnter","onMouseUp","row","className","id","Component","Dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","isWall","Infinity","isVisited","updateUnvisitedNeighbors","sort","A","B","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","Dfs","srow","scol","stack","x","pop","isFinish","isSafe","helper","Bfs","findGraphNode","list","i","heuristicEuclidean","node1","node2","d1","Math","abs","d2","sqrt","heuristicDiagonal","max","heuristicManhattan","neighborss","ret","y","Example","useState","isOpen","setIsOpen","disabled","Navbar","color","light","expand","NavLink","href","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","Button","Astar","Reset","Trailblazer","state","mousePressed","toChange","S_NODE_ROW","S_NODE_COL","F_NODE_ROW","F_NODE_COL","start","finish","visitedCount","shortestPathCount","resetGrid","bind","visualizeDfs","visualizeBfs","visualizeAstar","visualizeDijkstra","currentRow","createNode","newGrid","slice","newNode","nxode","setState","getInitialGrid","change","ChangedNode","isStart","handleStart","handleFinish","getNewGridWithWallToggled","nodesInShortestPathOrder","setTimeout","animateShortestPath","resetOnlyVisited","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","animateDfs","animateBfs","heuristic","selectedheuristic","f","g","h","openList","closedList","lowInd","k","curr","splice","reverse","gScore","gScoreIsBest","animateAstar","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29594fed.chunk.js","sourcesContent":["var shortestPathInOrderArray;\nexport function Astar(grid, startNode, finishNode,selectedheuristic) {\n    shortestPathInOrderArray = [startNode];\n    for (var x = 0; x < grid.length; x++) {\n        for (var y = 0; y < grid[x].length; y++) {\n            grid[x][y].f = 0;\n            grid[x][y].g = 0;\n            grid[x][y].h = 0;\n        }\n    }\n    const visitedNodesInOrder = [];\n    const openList = [], closedList = [];\n    openList.push(startNode);\n    visitedNodesInOrder.push(startNode);\n    while (openList.length) {\n        var lowInd = 0;\n        for (var k = 0; k < openList.length; k++){\n            if (openList[k].f < openList[lowInd].f) {\n                lowInd = k;\n            }\n        }\n        var currentNode = openList[lowInd];\n        if (currentNode.row === finishNode.row&&currentNode.col===finishNode.col) {\n            var curr = currentNode;\n            shortestPathInOrderArray.splice(0, shortestPathInOrderArray.length);\n            while (curr.previousNode) {\n                shortestPathInOrderArray.push(curr);\n                curr = curr.previousNode;\n            }\n            shortestPathInOrderArray.reverse();\n            shortestPathInOrderArray.unshift(startNode);\n            return visitedNodesInOrder;\n        }\n        openList.splice(lowInd, 1);\n        closedList.push(currentNode);\n        var neighbors = neighborss(grid, currentNode);\n\n        for (var i =0; i < neighbors.length; i++) {\n            var neighbor = neighbors[i];\n            if (findGraphNode(closedList,neighbor) || neighbor.isWall) {\n                continue;\n            }\n            var gScore = currentNode.g + 1;\n            var gScoreIsBest = false;\n\n            if (!findGraphNode(openList,neighbor)) {\n                gScoreIsBest = true;\n                if (selectedheuristic === \"Euclidean\") {\n                    neighbor.h = heuristicEuclidean(neighbor, finishNode);\n                }\n                else if (selectedheuristic === \"Manhattan\") {\n                    neighbor.h = heuristicManhattan(neighbor, finishNode);\n                }\n                else {\n                    neighbor.h = heuristicDiagonal(neighbor, finishNode);\n                }\n                openList.push(neighbor);\n                visitedNodesInOrder.push(neighbor);\n            }\n\n            else if (gScore < neighbor.g) {\n                gScoreIsBest = true;\n            }\n\n            if (gScoreIsBest) {\n                neighbor.previousNode = currentNode;\n                neighbor.g = gScore;\n                neighbor.f = neighbor.g + neighbor.h;\n            }\n        }\n    }\n    return [startNode];\n}\nexport function shortestPathInOrder() {\n    return shortestPathInOrderArray;\n}\nfunction findGraphNode(list, node) {\n    for (var i = 0; i < list.length; i++){\n        if (list[i] === node) return true;\n    }\n    return false;\n}\n\nfunction heuristicEuclidean(node1, node2) {\n    var d1 = Math.abs(node1.row - node2.row);\n    var d2 = Math.abs(node1.col - node2.col);\n    return Math.sqrt(d1*d1 + d2*d2);\n}\n\nfunction heuristicDiagonal(node1, node2) {\n    var d1 = Math.abs(node1.row - node2.row);\n    var d2 = Math.abs(node1.col - node2.col);\n    return Math.max(d1,d2);\n}\n\nfunction heuristicManhattan(node1, node2) {\n    var d1 = Math.abs(node1.row - node2.row);\n    var d2 = Math.abs(node1.col - node2.col);\n    return d1 + d2;\n}\n\nfunction neighborss(grid, node) {\n    var ret = [];\n    var x = node.row;\n    var y = node.col;\n\n    if (grid[x - 1] && grid[x - 1][y]) {\n        ret.push(grid[x - 1][y]);\n    }\n    if (grid[x + 1] && grid[x + 1][y]) {\n        ret.push(grid[x + 1][y]);\n    }\n    if (grid[x][y - 1] && grid[x][y - 1]) {\n        ret.push(grid[x][y - 1]);\n    }\n    if (grid[x][y + 1] && grid[x][y + 1]) {\n        ret.push(grid[x][y + 1]);\n    }\n    return ret;\n}","import React, { Component } from 'react';\nimport '../App.css';\nexport default class Node extends Component {\n    render() {\n        const {\n            col,\n            onMouseDown,\n            onMouseEnter,\n            onMouseUp,\n            row,\n            className\n        } = this.props;\n\n        return (\n            <div\n                id={`node-${row}-${col}`}\n                className={className}\n                onMouseDown={() => onMouseDown(row, col)}\n                onMouseEnter={() => onMouseEnter(row, col)}\n                onMouseUp={() => onMouseUp()}></div>\n        );\n    }\n}","export function Dijkstra(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid);\n    while (unvisitedNodes.length) {\n        sortNodesByDistance(unvisitedNodes);\n        \n        const closestNode = unvisitedNodes.shift();\n        if (closestNode.isWall) continue;\n\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\n\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n\n        if (closestNode === finishNode) return visitedNodesInOrder;\n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((A, B) => A.distance - B.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n        neighbor.distance = node.distance + 1;\n        neighbor.previousNode = node;\n    }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const { col, row } = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}","export function Dfs(grid, startNode) {\n    const visitedNodesInOrder = [];\n    helper(grid, startNode.row, startNode.col, visitedNodesInOrder);\n    return visitedNodesInOrder;\n}\nfunction isSafe(grid,srow,scol) {\n    return srow >= 0 && srow < grid.length && scol >= 0 && scol < grid[0].length && !grid[srow][scol].isVisited&&!grid[srow][scol].isWall;\n}\nfunction helper(grid, srow, scol, visitedNodesInOrder) {\n    const stack = [];\n    stack.push(grid[srow][scol]);\n    while (stack.length) {\n        const x = stack.pop();\n        if (x.isFinish) {\n            visitedNodesInOrder.push(x);\n            break;\n        }\n        visitedNodesInOrder.push(x);\n        x.isVisited = true;\n        if (isSafe(grid, x.row+1, x.col)) {\n            stack.push(grid[x.row+1][x.col]);\n        }\n        if (isSafe(grid, x.row, x.col - 1)) {\n            stack.push(grid[x.row][x.col - 1]);\n        }\n        if (isSafe(grid, x.row, x.col+1)) {\n            stack.push(grid[x.row][x.col+1]);\n        }\n        if (isSafe(grid, x.row-1, x.col)) {\n            stack.push(grid[x.row-1][x.col]);\n        }\n    }\n}","export function Bfs(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid);\n    while (unvisitedNodes.length) {\n        sortNodesByDistance(unvisitedNodes);\n\n        const closestNode = unvisitedNodes.shift();\n        if (closestNode.isWall) continue;\n\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\n\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n\n        if (closestNode === finishNode) return visitedNodesInOrder;\n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((A, B) => A.distance - B.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n        neighbor.distance = node.distance + 1;\n        neighbor.previousNode = node;\n    }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const { col, row } = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}","import React, { useState } from 'react';\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavLink,\n    Nav,\n    NavItem,\n    Button\n} from 'reactstrap';\nconst Example = (props) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const disabled = props.disabled;\n    const toggle = () => setIsOpen(!isOpen);\n\n    return (\n        <div>\n            <Navbar color=\"dark\" light expand=\"md\">\n                <NavLink href=\"/\" className=\"text-white\">Trailblazer</NavLink>\n                <NavbarToggler onClick={toggle} />\n                <Collapse isOpen={isOpen} navbar>\n                    <Nav className=\"mr-auto\" navbar>\n                        <NavItem>\n                            <Button disabled={disabled} className=\"btn bg-transparent  text-white\" onClick={() => { props.Dijkstra(); }}>Dijkstra</Button>\n                        </NavItem>\n                        <NavItem>\n                            <Button disabled={disabled} className=\"btn bg-transparent  text-white\" onClick={() => { props.Dfs(); }}>Depth First Search</Button>\n                        </NavItem>\n                        <NavItem>\n                            <Button disabled={disabled} className=\"btn bg-transparent  text-white\" onClick={() => { props.Bfs(); }}>Breadth First Search</Button>\n                        </NavItem>\n                        <NavItem>\n                            <Button disabled={disabled} className=\"btn bg-transparent  text-white\" onClick={() => { props.Astar(\"Euclidean\"); }}>Astar Euclidean</Button>\n                        </NavItem>\n                        <NavItem>\n                            <Button disabled={disabled} className=\"btn bg-transparent  text-white\" onClick={() => { props.Astar(\"Manhattan\"); }}>Astar Manhattan</Button>\n                        </NavItem>\n                        <NavItem>\n                            <Button disabled={disabled} className=\"btn bg-transparent  text-white\" onClick={() => { props.Astar(\"Diagonal\"); }}>Astar Diagonal</Button>\n                        </NavItem>\n                        <NavItem>\n                            <Button disabled={disabled} className=\"btn bg-transparent  text-white\" onClick={() => props.Reset()}>Reset Grid</Button>\n                        </NavItem>\n                    </Nav>\n                </Collapse>\n            </Navbar>\n        </div>\n    );\n}\n\nexport default Example;","import React, { Component } from 'react';\nimport Node from './Node.jsx';\nimport '../App.css';\nimport { Dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\nimport { Dfs } from '../algorithms/dfs';\nimport { Bfs } from '../algorithms/bfs';\nimport { Astar, shortestPathInOrder } from '../algorithms/astar';\nimport Header from './HeaderComponent.jsx';\n\nexport default class Trailblazer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            grid: [],\n            mousePressed: false,\n            toChange: null,\n            disabled: false,\n            S_NODE_ROW: 10,\n            S_NODE_COL: 15,\n            F_NODE_ROW: 10,\n            F_NODE_COL: 36,\n            start: false,\n            finish: false,\n            visitedCount: 0,\n            shortestPathCount:0\n        };\n        this.resetGrid = this.resetGrid.bind(this);\n        this.visualizeDfs = this.visualizeDfs.bind(this);\n        this.visualizeBfs = this.visualizeBfs.bind(this);\n        this.visualizeAstar = this.visualizeAstar.bind(this);\n        this.visualizeDijkstra = this.visualizeDijkstra.bind(this);\n    }\n\n    createNode(row, col) {\n        return {\n            col,\n            row,\n            className:'node',\n            distance: Infinity,\n            isVisited: false,\n            isWall: false,\n            previousNode: null,\n        };\n    };\n\n    getInitialGrid(){\n        const grid = [];\n        for (let row = 0; row < 24; row++) {\n            const currentRow = [];\n            for (let col = 0; col < 55; col++) {\n                currentRow.push(this.createNode(row, col));\n            }\n            grid.push(currentRow);\n        }\n        grid[this.state.S_NODE_ROW][this.state.S_NODE_COL].className = 'node node-start';\n        grid[this.state.F_NODE_ROW][this.state.F_NODE_COL].className = 'node node-finish';\n        return grid;\n    };\n\n    getNewGridWithWallToggled(row, col){\n        const newGrid = this.state.grid.slice();\n        const node = newGrid[row][col];\n        if (row === this.state.S_NODE_ROW && col === this.state.S_NODE_COL) return newGrid;\n        if (row === this.state.F_NODE_ROW && col === this.state.F_NODE_COL) return newGrid;\n        const newNode = {\n            ...node,\n            isWall: !node.isWall,\n            isVisited:false,\n            className: node.isWall?'node':'node node-wall',\n        };\n        newGrid[row][col] = newNode;\n        return newGrid;\n    };\n\n    resetOnlyVisited() {\n        const { toChange, grid } = this.state;\n        const newGrid = grid.slice();\n        if (toChange !== null) {\n            for (let i = 0; i < toChange.length; i++) {\n                const node = toChange[i];\n                if (node.row===this.state.S_NODE_ROW&&node.col===this.state.S_NODE_COL) {\n                    const nxode = grid[node.row][node.col];\n                    const newNode = {\n                        ...nxode,\n                        isVisited: false,\n                        className: 'node node-start'\n                    };\n                    newGrid[node.row][node.col] = newNode;\n                }\n                else if (node.row === this.state.F_NODE_ROW && node.col === this.state.F_NODE_COL) {\n                    const nxode = grid[node.row][node.col];\n                    const newNode = {\n                        ...nxode,\n                        isVisited: false,\n                        className: 'node node-finish'\n                    };\n                    newGrid[node.row][node.col] = newNode;\n                }\n                else if (grid[node.row][node.col].isWall){\n                    const nxode = grid[node.row][node.col];\n                    const newNode = {\n                        ...nxode,\n                        isVisited: false,\n                        isWall: true,\n                        className: 'node node-wall'\n                    };\n                    newGrid[node.row][node.col] = newNode;\n                }\n                else {\n                    const nxode = grid[node.row][node.col];\n                    const newNode = {\n                        ...nxode,\n                        isVisited: false,\n                        className: 'node'\n                    };\n                    newGrid[node.row][node.col] = newNode;\n                }\n            }\n            for (const row of grid) {\n                for (const node of row) {\n                    node.distance = Infinity;\n                }\n            }\n            \n        }\n        \n        this.setState({ grid: newGrid, toChange: null, visitedCount: 0, shortestPathCount: 0 });\n    }\n\n\n    resetGrid() {\n        const grid = this.getInitialGrid();\n        this.setState({ grid: grid, disabled: false,visitedCount:0,shortestPathCount:0});\n    }\n\n    componentDidMount() {\n        this.resetGrid();\n    }\n\n    handleStart(grid,row, col) {\n        const newGrid = grid.slice();\n        const change = newGrid[this.state.S_NODE_ROW][this.state.S_NODE_COL];\n        const ChangedNode = {\n            ...change,\n            isVisited:false,\n            isStart: false,\n            className:'node'\n        }\n        newGrid[this.state.S_NODE_ROW][this.state.S_NODE_COL] = ChangedNode;\n        const node = grid[row][col];\n        const newNode = {\n            ...node,\n            isVisited:false,\n            isStart: true,\n            className:'node node-start'\n        };\n        this.setState({ S_NODE_ROW: row, S_NODE_COL: col });\n        newGrid[row][col] = newNode;\n        return newGrid;\n    }\n\n    handleFinish(grid, row, col) {\n        const newGrid = grid.slice();\n        const change = newGrid[this.state.F_NODE_ROW][this.state.F_NODE_COL];\n        const ChangedNode = {\n            ...change,\n            isVisited:false,\n            isFinish: false,\n            className: 'node'\n        }\n        newGrid[this.state.F_NODE_ROW][this.state.F_NODE_COL] = ChangedNode;\n        const node = grid[row][col];\n        const newNode = {\n            ...node,\n            isFinish: true,\n            className:'node node-finish'\n        };\n        this.setState({ F_NODE_ROW: row, F_NODE_COL: col });\n        newGrid[row][col] = newNode;\n        return newGrid;\n    }\n\n    handleMouseDown(row, col) {\n        if (row===this.state.S_NODE_ROW&&col===this.state.S_NODE_COL) {\n            this.setState({ start: true });\n        }\n        if (row===this.state.F_NODE_ROW&&col===this.state.F_NODE_COL) {\n            this.setState({ finish: true });\n        }\n        const newGrid = this.state.start?this.handleStart(this.state.grid,row,col):this.state.finish?this.handleFinish(this.state.grid,row,col):this.getNewGridWithWallToggled(row, col);\n        this.setState({ grid: newGrid, mousePressed: true });\n    }\n\n    handleMouseEnter(row, col) {\n        if (!this.state.mousePressed) return;\n        const newGrid = this.state.start ? this.handleStart(this.state.grid, row, col) : this.state.finish ? this.handleFinish(this.state.grid, row, col) : this.getNewGridWithWallToggled( row, col);\n        this.setState({ grid: newGrid });\n    }\n\n    handleMouseUp() {\n        this.setState({ mousePressed: false,start:false,finish:false});\n    }\n\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n        const newGrid = this.state.grid.slice();\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n            if (i === visitedNodesInOrder.length) {\n                setTimeout(() => {\n                    this.animateShortestPath(nodesInShortestPathOrder);\n                }, 10 * i);\n                return;\n            }\n            setTimeout(() => {\n                const node = visitedNodesInOrder[i];\n                const nxode = newGrid[node.row][node.col];\n                const newNode = {\n                    ...nxode,\n                    previousNode: null,\n                    distance:Infinity,\n                    className: 'node node-visited'\n                };\n                newGrid[node.row][node.col] = newNode;\n                this.setState({ grid: newGrid, visitedCount: this.state.visitedCount + 1 });\n            }, 10 * i);\n        }\n    }\n\n    animateShortestPath(nodesInShortestPathOrder) {\n        const newGrid = this.state.grid.slice();\n        for (let i = 0; i <= nodesInShortestPathOrder.length; i++) {\n            if (i === nodesInShortestPathOrder.length) {\n                setTimeout(() => {\n                    this.setState({ disabled: !this.state.disabled });\n                }, 50 * i);\n                return;\n            }\n            setTimeout(() => {\n                const node = nodesInShortestPathOrder[i];\n                const nxode = newGrid[node.row][node.col];\n                const newNode = {\n                    ...nxode,\n                    previousNode: null,\n                    distance:Infinity,\n                    className: 'node node-shortest-path'\n                };\n                newGrid[node.row][node.col] = newNode;\n                this.setState({ grid: newGrid,shortestPathCount:this.state.shortestPathCount+1 });\n            }, 50 * i);\n        }\n    }\n\n    animateDfs(visitedNodesInOrder) {\n        const newGrid = this.state.grid.slice();\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n            if (i === visitedNodesInOrder.length) {\n                setTimeout(() => {\n                    this.animateShortestPath(visitedNodesInOrder);\n                }, 10 * i);\n                return;\n            }\n            setTimeout(() => {\n                const node = visitedNodesInOrder[i];\n                const nxode = newGrid[node.row][node.col];\n                const newNode = {\n                    ...nxode,\n                    className: 'node node-visited'\n                };\n                newGrid[node.row][node.col] = newNode;\n                this.setState({ grid: newGrid,visitedCount:this.state.visitedCount+1 });\n            }, 10 * i);\n        }\n    }\n\n    visualizeDijkstra() {\n        const { grid } = this.state;\n        this.resetOnlyVisited();\n        const startNode = grid[this.state.S_NODE_ROW][this.state.S_NODE_COL];\n        const finishNode = grid[this.state.F_NODE_ROW][this.state.F_NODE_COL];\n        const visitedNodesInOrder = Dijkstra(grid, startNode, finishNode);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        this.setState({ ...this.state, toChange: visitedNodesInOrder, visitedCount: 0, shortestPathCount: 0, disabled: !this.state.disabled, mousePressed: false});\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n    visualizeDfs() {\n        this.resetOnlyVisited();\n        const { grid } = this.state;\n        const startNode = grid[this.state.S_NODE_ROW][this.state.S_NODE_COL];\n        const finishNode = grid[this.state.F_NODE_ROW][this.state.F_NODE_COL];\n        const visitedNodesInOrder = Dfs(grid, startNode, finishNode);\n        this.setState({ ...this.state, toChange: visitedNodesInOrder, visitedCount: 0, shortestPathCount: 0, disabled: !this.state.disabled, mousePressed: false  });\n        this.animateDfs(visitedNodesInOrder);\n    }\n\n    animateBfs(visitedNodesInOrder) {\n        const newGrid = this.state.grid.slice();\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n            if (i === visitedNodesInOrder.length) {\n                setTimeout(() => {\n                    this.animateShortestPath(visitedNodesInOrder);\n                }, 10 * i);\n                this.setState({ grid: newGrid });\n                return;\n            }\n            setTimeout(() => {\n                const node = visitedNodesInOrder[i];\n                const nxode = newGrid[node.row][node.col];\n                const newNode = {\n                    ...nxode,\n                    className: 'node node-visited'\n                };\n                newGrid[node.row][node.col] = newNode;\n                this.setState({ grid: newGrid, visitedCount: this.state.visitedCount + 1 });\n            }, 10 * i);\n        }\n    }\n\n    visualizeBfs() {\n        this.resetOnlyVisited();\n        const grid = this.state.grid;\n        const startNode = grid[this.state.S_NODE_ROW][this.state.S_NODE_COL];\n        const finishNode = grid[this.state.F_NODE_ROW][this.state.F_NODE_COL];\n        const visitedNodesInOrder = Bfs(grid, startNode, finishNode);\n        this.setState({ toChange: visitedNodesInOrder, visitedCount: 0, shortestPathCount: 0, disabled: !this.state.disabled, mousePressed: false });\n        this.animateBfs(visitedNodesInOrder);\n    }\n\n    animateAstar(visitedNodesInOrder, nodesInShortestPathOrder) {\n        const newGrid = this.state.grid.slice();\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n            if (i === visitedNodesInOrder.length) {\n                setTimeout(() => {\n                    this.animateShortestPath(nodesInShortestPathOrder);\n                }, 10 * i);\n                return;\n            }\n            setTimeout(() => {\n                const node = visitedNodesInOrder[i];\n                const nxode = newGrid[node.row][node.col];\n                const newNode = {\n                    ...nxode,\n                    className: 'node node-visited'\n                };\n                newGrid[node.row][node.col] = newNode;\n                this.setState({ grid: newGrid, visitedCount: this.state.visitedCount + 1 });\n            }, 10 * i);\n        }\n    }\n\n\n    visualizeAstar(heuristic) {\n        this.resetOnlyVisited();\n        const grid = this.state.grid;\n        const startNode = grid[this.state.S_NODE_ROW][this.state.S_NODE_COL];\n        const finishNode = grid[this.state.F_NODE_ROW][this.state.F_NODE_COL];\n        const visitedNodesInOrder = Astar(grid, startNode, finishNode,heuristic);\n        const nodesInShortestPathOrder = shortestPathInOrder();\n        this.setState({ toChange: visitedNodesInOrder, visitedCount: 0, shortestPathCount: 0, disabled: !this.state.disabled, mousePressed: false  });\n        this.animateAstar(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n    render() {\n        const { grid, mousePressed,visitedCount,shortestPathCount,disabled } = this.state;\n        return (\n            <>\n                <Header Reset={this.resetGrid} Dijkstra={() => this.visualizeDijkstra()} Dfs={this.visualizeDfs} Bfs={this.visualizeBfs} Astar={(heuristic)=>this.visualizeAstar(heuristic)} disabled={this.state.disabled} />\n                <div className=\"container\">\n                    <div>Visited Nodes Count: {visitedCount}</div>\n                    <div>Shortest Path Nodes Count: {shortestPathCount}</div>\n                </div>\n                \n                <div className=\"grid\" disabled={disabled}>\n                    {\n                        grid.map((row, rowIdx) => {\n                            return (\n                                <div key={rowIdx} className=\"row\">\n                                    {\n                                        row.map((node, nodeIdx) => {\n                                            const { row, col, isWall,className } = node;\n                                            return (\n                                                <Node\n                                                    className={className}\n                                                    key={nodeIdx}\n                                                    col={col}\n                                                    isWall={isWall}\n                                                    mousePressed={mousePressed}\n                                                    onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                                                    onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\n                                                    onMouseUp={() => this.handleMouseUp()}\n                                                    row={row}>\n                                                </Node>\n                                            );\n                                        })}\n                                </div>\n                            );\n                        })}\n                </div>\n            </>\n        );\n    }\n}","import MainComponent from './components/MainComponent';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainComponent/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}