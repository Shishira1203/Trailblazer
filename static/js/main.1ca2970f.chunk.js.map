{"version":3,"sources":["algorithms/astar.js","components/Node.jsx","algorithms/dijkstra.js","algorithms/dfs.js","algorithms/bfs.js","components/HeaderComponent.jsx","components/MainComponent.jsx","App.js","reportWebVitals.js","index.js"],"names":["shortestPathInOrderArray","Node","props","state","this","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","Dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","A","B","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","Dfs","srow","scol","stack","console","log","x","pop","isSafe","helper","Bfs","findGraphNode","list","i","heuristicEuclidean","node1","node2","d1","Math","abs","d2","sqrt","heuristicDiagonal","max","heuristicManhattan","neighborss","ret","y","Example","useState","isOpen","setIsOpen","disabled","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","Button","Astar","Reset","Trailblazer","mousePressed","toChange","S_NODE_ROW","S_NODE_COL","F_NODE_ROW","F_NODE_COL","start","finish","T_NODE_ROW","T_NODE_COL","resetGrid","bind","visualizeDfs","visualizeBfs","visualizeAstar","visualizeDijkstra","currentRow","createNode","newGrid","slice","newNode","document","getElementById","getInitialGrid","setState","handleStart","handleFinish","getNewGridWithWallToggled","nodesInShortestPathOrder","setTimeout","animateShortestPath","resetOnlyVisited","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","animateDfs","animateBfs","heuristic","selectedheuristic","f","g","h","openList","closedList","lowInd","k","curr","splice","reverse","gScore","gScoreIsBest","animateAstar","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1ca2970f.chunk.js","sourcesContent":["var shortestPathInOrderArray;\nexport function Astar(grid, startNode, finishNode,selectedheuristic) {\n    shortestPathInOrderArray = [startNode];\n    for (var x = 0; x < grid.length; x++) {\n        for (var y = 0; y < grid[x].length; y++) {\n            grid[x][y].f = 0;\n            grid[x][y].g = 0;\n            grid[x][y].h = 0;\n        }\n    }\n    const visitedNodesInOrder = [];\n    const openList = [], closedList = [];\n    openList.push(startNode);\n    visitedNodesInOrder.push(startNode);\n    while (openList.length) {\n        var lowInd = 0;\n        for (var k = 0; k < openList.length; k++){\n            if (openList[k].f < openList[lowInd].f) {\n                lowInd = k;\n            }\n        }\n        var currentNode = openList[lowInd];\n        if (currentNode.row === finishNode.row&&currentNode.col===finishNode.col) {\n            var curr = currentNode;\n            shortestPathInOrderArray.splice(0, shortestPathInOrderArray.length);\n            while (curr.previousNode) {\n                shortestPathInOrderArray.push(curr);\n                curr = curr.previousNode;\n            }\n            shortestPathInOrderArray.reverse();\n            shortestPathInOrderArray.unshift(startNode);\n            return visitedNodesInOrder;\n        }\n        openList.splice(lowInd, 1);\n        closedList.push(currentNode);\n        var neighbors = neighborss(grid, currentNode);\n\n        for (var i =0; i < neighbors.length; i++) {\n            var neighbor = neighbors[i];\n            if (findGraphNode(closedList,neighbor) || neighbor.isWall) {\n                continue;\n            }\n            var gScore = currentNode.g + 1;\n            var gScoreIsBest = false;\n\n            if (!findGraphNode(openList,neighbor)) {\n                gScoreIsBest = true;\n                if (selectedheuristic === \"Euclidean\") {\n                    neighbor.h = heuristicEuclidean(neighbor, finishNode);\n                }\n                else if (selectedheuristic === \"Manhattan\") {\n                    neighbor.h = heuristicManhattan(neighbor, finishNode);\n                }\n                else {\n                    neighbor.h = heuristicDiagonal(neighbor, finishNode);\n                }\n                openList.push(neighbor);\n                visitedNodesInOrder.push(neighbor);\n            }\n\n            else if (gScore < neighbor.g) {\n                gScoreIsBest = true;\n            }\n\n            if (gScoreIsBest) {\n                neighbor.previousNode = currentNode;\n                neighbor.g = gScore;\n                neighbor.f = neighbor.g + neighbor.h;\n            }\n        }\n    }\n    return [startNode];\n}\nexport function shortestPathInOrder() {\n    return shortestPathInOrderArray;\n}\nfunction findGraphNode(list, node) {\n    for (var i = 0; i < list.length; i++){\n        if (list[i] === node) return true;\n    }\n    return false;\n}\n\nfunction heuristicEuclidean(node1, node2) {\n    var d1 = Math.abs(node1.row - node2.row);\n    var d2 = Math.abs(node1.col - node2.col);\n    return Math.sqrt(d1*d1 + d2*d2);\n}\n\nfunction heuristicDiagonal(node1, node2) {\n    var d1 = Math.abs(node1.row - node2.row);\n    var d2 = Math.abs(node1.col - node2.col);\n    return Math.max(d1,d2);\n}\n\nfunction heuristicManhattan(node1, node2) {\n    var d1 = Math.abs(node1.row - node2.row);\n    var d2 = Math.abs(node1.col - node2.col);\n    return d1 + d2;\n}\n\nfunction neighborss(grid, node) {\n    var ret = [];\n    var x = node.row;\n    var y = node.col;\n\n    if (grid[x - 1] && grid[x - 1][y]) {\n        ret.push(grid[x - 1][y]);\n    }\n    if (grid[x + 1] && grid[x + 1][y]) {\n        ret.push(grid[x + 1][y]);\n    }\n    if (grid[x][y - 1] && grid[x][y - 1]) {\n        ret.push(grid[x][y - 1]);\n    }\n    if (grid[x][y + 1] && grid[x][y + 1]) {\n        ret.push(grid[x][y + 1]);\n    }\n    return ret;\n}","import React, { Component } from 'react';\nimport '../App.css';\nexport default class Node extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        const {\n            col,\n            isFinish,\n            isStart,\n            isWall,\n            onMouseDown,\n            onMouseEnter,\n            onMouseUp,\n            row,\n        } = this.props;\n        const extraClassName = isFinish\n            ? 'node-finish'\n            : isStart\n                ? 'node-start'\n                : isWall\n                    ? 'node-wall'\n                    : '';\n\n        return (\n            <div\n                id={`node-${row}-${col}`}\n                className={`node ${extraClassName}`}\n                onMouseDown={() => onMouseDown(row, col)}\n                onMouseEnter={() => onMouseEnter(row, col)}\n                onMouseUp={() => onMouseUp()}></div>\n        );\n    }\n}","export function Dijkstra(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid);\n    while (unvisitedNodes.length) {\n        sortNodesByDistance(unvisitedNodes);\n        \n        const closestNode = unvisitedNodes.shift();\n        if (closestNode.isWall) continue;\n\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\n\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n\n        if (closestNode === finishNode) return visitedNodesInOrder;\n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((A, B) => A.distance - B.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n        neighbor.distance = node.distance + 1;\n        neighbor.previousNode = node;\n    }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const { col, row } = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}","export function Dfs(grid, startNode) {\n    const visitedNodesInOrder = [];\n    helper(grid, startNode.row, startNode.col, visitedNodesInOrder);\n    return visitedNodesInOrder;\n}\nfunction isSafe(grid,srow,scol) {\n    return srow >= 0 && srow < grid.length && scol >= 0 && scol < grid[0].length && !grid[srow][scol].isVisited&&!grid[srow][scol].isWall;\n}\nfunction helper(grid, srow, scol, visitedNodesInOrder) {\n    const stack = [];\n    stack.push(grid[srow][scol]);\n    console.log(stack);\n    while (stack.length) {\n        const x = stack.pop();\n        if (x.isFinish) {\n            visitedNodesInOrder.push(x);\n            break;\n        }\n        visitedNodesInOrder.push(x);\n        x.isVisited = true;\n        if (isSafe(grid, x.row+1, x.col)) {\n            stack.push(grid[x.row+1][x.col]);\n        }\n        if (isSafe(grid, x.row, x.col - 1)) {\n            stack.push(grid[x.row][x.col - 1]);\n        }\n        if (isSafe(grid, x.row, x.col+1)) {\n            stack.push(grid[x.row][x.col+1]);\n        }\n        if (isSafe(grid, x.row-1, x.col)) {\n            stack.push(grid[x.row-1][x.col]);\n        }\n    }\n}","export function Bfs(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid);\n    while (unvisitedNodes.length) {\n        sortNodesByDistance(unvisitedNodes);\n\n        const closestNode = unvisitedNodes.shift();\n        if (closestNode.isWall) continue;\n\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\n\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n\n        if (closestNode === finishNode) return visitedNodesInOrder;\n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((A, B) => A.distance - B.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n        neighbor.distance = node.distance + 1;\n        neighbor.previousNode = node;\n    }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const { col, row } = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}","import React, { useState } from 'react';\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    Button\n} from 'reactstrap';\nconst Example = (props) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const disabled = props.disabled;\n    const toggle = () => setIsOpen(!isOpen);\n\n    return (\n        <div>\n            <Navbar color=\"dark\" light expand=\"md\">\n                <NavbarBrand href=\"/\" className=\"text-white\">Trailblazer</NavbarBrand>\n                <NavbarToggler onClick={toggle} />\n                <Collapse isOpen={isOpen} navbar>\n                    <Nav className=\"mr-auto\" navbar>\n                        <NavItem>\n                            <Button disabled={disabled} className=\"btn bg-transparent  text-white\" onClick={() => { props.Dijkstra(); }}>Dijkstra</Button>\n                        </NavItem>\n                        <NavItem>\n                            <Button disabled={disabled} className=\"btn bg-transparent  text-white\" onClick={() => { props.Dfs(); }}>Depth First Search</Button>\n                        </NavItem>\n                        <NavItem>\n                            <Button disabled={disabled} className=\"btn bg-transparent  text-white\" onClick={() => { props.Bfs(); }}>Breadth First Search</Button>\n                        </NavItem>\n                        <NavItem>\n                            <Button disabled={disabled} className=\"btn bg-transparent  text-white\" onClick={() => { props.Astar(\"Euclidean\"); }}>Astar Euclidean</Button>\n                        </NavItem>\n                        <NavItem>\n                            <Button disabled={disabled} className=\"btn bg-transparent  text-white\" onClick={() => { props.Astar(\"Manhattan\"); }}>Astar Manhattan</Button>\n                        </NavItem>\n                        <NavItem>\n                            <Button disabled={disabled} className=\"btn bg-transparent  text-white\" onClick={() => { props.Astar(\"Diagonal\"); }}>Astar Diagonal</Button>\n                        </NavItem>\n                        <NavItem>\n                            <Button disabled={disabled} className=\"btn bg-transparent  text-white\" onClick={() => props.Reset()}>Reset Grid</Button>\n                        </NavItem>\n                    </Nav>\n                </Collapse>\n            </Navbar>\n        </div>\n    );\n}\n\nexport default Example;","import React, { Component } from 'react';\nimport Node from './Node.jsx';\nimport '../App.css';\nimport { Dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\nimport { Dfs } from '../algorithms/dfs';\nimport { Bfs } from '../algorithms/bfs';\nimport { Astar, shortestPathInOrder } from '../algorithms/astar';\nimport Header from './HeaderComponent.jsx';\n\nexport default class Trailblazer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            grid: [],\n            mousePressed: false,\n            toChange: null,\n            disabled: false,\n            S_NODE_ROW: 10,\n            S_NODE_COL: 15,\n            F_NODE_ROW: 10,\n            F_NODE_COL: 36,\n            start: false,\n            finish: false,\n            T_NODE_ROW: 0,\n            T_NODE_COL: 0,\n        };\n        this.resetGrid = this.resetGrid.bind(this);\n        this.visualizeDfs = this.visualizeDfs.bind(this);\n        this.visualizeBfs = this.visualizeBfs.bind(this);\n        this.visualizeAstar = this.visualizeAstar.bind(this);\n        this.visualizeDijkstra = this.visualizeDijkstra.bind(this);\n    }\n\n    createNode(row, col) {\n        return {\n            col,\n            row,\n            isStart: row === this.state.S_NODE_ROW && col === this.state.S_NODE_COL,\n            isFinish: row === this.state.F_NODE_ROW && col === this.state.F_NODE_COL,\n            distance: Infinity,\n            isVisited: false,\n            isWall: false,\n            previousNode: null,\n        };\n    };\n\n    getInitialGrid(){\n        const grid = [];\n        for (let row = 0; row < 24; row++) {\n            const currentRow = [];\n            for (let col = 0; col < 55; col++) {\n                currentRow.push(this.createNode(row, col));\n            }\n            grid.push(currentRow);\n        }\n        return grid;\n    };\n\n    getNewGridWithWallToggled(grid, row, col){\n        const newGrid = grid.slice();\n        const node = newGrid[row][col];\n        const newNode = {\n            ...node,\n            isWall: !node.isWall,\n        };\n        newGrid[row][col] = newNode;\n        return newGrid;\n    };\n\n    resetOnlyVisited() {\n        const { toChange } = this.state;\n        if (toChange !== null) {\n            for (let i = 0; i < toChange.length; i++) {\n                const node = toChange[i];\n                node.isVisited = false;\n                if (node.row === this.state.S_NODE_ROW && node.col === this.state.S_NODE_COL) {\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-start';\n                }\n                else if (node.row === this.state.F_NODE_ROW && node.col === this.state.F_NODE_COL) {\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-finish';\n                }\n                else if(this.state.grid[node.row][node.col].isWall){\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-wall';\n                }\n                else {\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\n                }\n            }\n        }\n    }\n\n\n    resetGrid() {\n        const grid = this.getInitialGrid();\n        this.setState({ grid: grid, disabled: false });\n        const toChange = this.state.toChange;\n        if (toChange !== null) {\n            for (let i = 0; i < toChange.length; i++) {\n                const node = toChange[i];\n                if (node.row === this.state.S_NODE_ROW && node.col === this.state.S_NODE_COL) {\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-start';\n                }\n                else if (node.row === this.state.F_NODE_ROW && node.col === this.state.F_NODE_COL) {\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-finish';\n                }\n                else if(!node.isWall){\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\n                }\n            }\n        }\n    }\n\n    componentDidMount() {\n        this.resetGrid();\n    }\n\n    handleStart(grid,row, col) {\n        const newGrid = grid.slice();\n        newGrid[this.state.S_NODE_ROW][this.state.S_NODE_COL].isStart = false;\n        const node = grid[row][col];\n        const newNode = {\n            ...node,\n            isStart: true,\n        };\n        this.setState({ S_NODE_ROW: row, S_NODE_COL: col });\n        newGrid[row][col] = newNode;\n        return newGrid;\n    }\n\n    handleFinish(grid, row, col) {\n        const newGrid = grid.slice();\n        newGrid[this.state.F_NODE_ROW][this.state.F_NODE_COL].isFinish = false;\n        const node = grid[row][col];\n        const newNode = {\n            ...node,\n            isFinish: true,\n        };\n        this.setState({ F_NODE_ROW: row, F_NODE_COL: col });\n        newGrid[row][col] = newNode;\n        return newGrid;\n    }\n\n    handleMouseDown(row, col) {\n        if (row === this.state.S_NODE_ROW && col === this.state.S_NODE_COL) {\n            this.setState({ start: true });\n        }\n        if (row === this.state.F_NODE_ROW && col === this.state.F_NODE_COL) {\n            this.setState({ finish: true });\n        }\n        const newGrid = this.state.start?this.handleStart(this.state.grid,row,col):this.state.finish?this.handleFinish(this.state.grid,row,col):this.getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({ grid: newGrid, mousePressed: true });\n    }\n\n    handleMouseEnter(row, col) {\n        if (!this.state.mousePressed) return;\n        const newGrid = this.state.start ? this.handleStart(this.state.grid, row, col) : this.state.finish ? this.handleFinish(this.state.grid, row, col) : this.getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({ grid: newGrid });\n    }\n\n    handleMouseUp() {\n        this.setState({ mousePressed: false,start:false,finish:false});\n    }\n\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n            if (i === visitedNodesInOrder.length) {\n                setTimeout(() => {\n                    this.animateShortestPath(nodesInShortestPathOrder);\n                }, 10 * i);\n                return;\n            }\n            setTimeout(() => {\n                const node = visitedNodesInOrder[i];\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n            }, 10 * i);\n        }\n    }\n\n    animateShortestPath(nodesInShortestPathOrder) {\n        for (let i = 0; i <= nodesInShortestPathOrder.length; i++) {\n            if (i === nodesInShortestPathOrder.length) {\n                setTimeout(() => {\n                    this.setState({ disabled: !this.state.disabled });\n                }, 50 * i);\n                return;\n            }\n            setTimeout(() => {\n                const node = nodesInShortestPathOrder[i];\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n            }, 50 * i);\n        }\n    }\n\n    animateDfs(visitedNodesInOrder) {\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n            if (i === visitedNodesInOrder.length) {\n                setTimeout(() => {\n                    this.animateShortestPath(visitedNodesInOrder);\n                }, 10 * i);\n                return;\n            }\n            setTimeout(() => {\n                const node = visitedNodesInOrder[i];\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n            }, 10 * i);\n        }\n    }\n\n    visualizeDijkstra() {\n        this.resetOnlyVisited();\n        const { grid } = this.state;\n        const startNode = grid[this.state.S_NODE_ROW][this.state.S_NODE_COL];\n        const finishNode = grid[this.state.F_NODE_ROW][this.state.F_NODE_COL];\n        const visitedNodesInOrder = Dijkstra(grid, startNode, finishNode);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        this.setState({ ...this.state, toChange: visitedNodesInOrder });\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n        this.setState({ disabled: !this.state.disabled, mousePressed: false });\n\n    }\n\n    visualizeDfs() {\n        this.resetOnlyVisited();\n        const { grid } = this.state;\n        const startNode = grid[this.state.S_NODE_ROW][this.state.S_NODE_COL];\n        const finishNode = grid[this.state.F_NODE_ROW][this.state.F_NODE_COL];\n        console.log(startNode, finishNode);\n        const visitedNodesInOrder = Dfs(grid, startNode, finishNode);\n        this.setState({ ...this.state, toChange: visitedNodesInOrder });\n        this.animateDfs(visitedNodesInOrder);\n        this.setState({ disabled: !this.state.disabled, mousePressed: false });\n    }\n\n    animateBfs(visitedNodesInOrder) {\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n            if (i === visitedNodesInOrder.length) {\n                setTimeout(() => {\n                    this.animateShortestPath(visitedNodesInOrder);\n                }, 10 * i);\n                return;\n            }\n            setTimeout(() => {\n                const node = visitedNodesInOrder[i];\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n            }, 10 * i);\n        }\n    }\n\n    visualizeBfs() {\n        this.resetOnlyVisited();\n        const grid = this.state.grid;\n        const startNode = grid[this.state.S_NODE_ROW][this.state.S_NODE_COL];\n        const finishNode = grid[this.state.F_NODE_ROW][this.state.F_NODE_COL];\n        const visitedNodesInOrder = Bfs(grid, startNode, finishNode);\n        this.setState({ ...this.state, toChange: visitedNodesInOrder });\n        this.setState({ disabled: !this.state.disabled, mousePressed: false });\n        this.animateBfs(visitedNodesInOrder);\n    }\n\n    animateAstar(visitedNodesInOrder, nodesInShortestPathOrder) {\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n            if (i === visitedNodesInOrder.length) {\n                setTimeout(() => {\n                    this.animateShortestPath(nodesInShortestPathOrder);\n                }, 10 * i);\n                return;\n            }\n            setTimeout(() => {\n                const node = visitedNodesInOrder[i];\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n            }, 10 * i);\n        }\n    }\n\n\n    visualizeAstar(heuristic) {\n        this.resetOnlyVisited();\n        const grid = this.state.grid;\n        const startNode = grid[this.state.S_NODE_ROW][this.state.S_NODE_COL];\n        const finishNode = grid[this.state.F_NODE_ROW][this.state.F_NODE_COL];\n        const visitedNodesInOrder = Astar(grid, startNode, finishNode,heuristic);\n        const nodesInShortestPathOrder = shortestPathInOrder();\n        this.setState({ ...this.state, toChange: visitedNodesInOrder });\n        this.setState({ disabled: !this.state.disabled, mousePressed: false });\n        this.animateAstar(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n    render() {\n        const { grid, mousePressed } = this.state;\n        return (\n            <>\n                <Header Reset={this.resetGrid} Dijkstra={() => this.visualizeDijkstra()} Dfs={this.visualizeDfs} Bfs={this.visualizeBfs} Astar={(heuristic)=>this.visualizeAstar(heuristic)} disabled={this.state.disabled} />\n                <div className=\"grid\" disabled={this.state.disabled}>\n                    {\n                        grid.map((row, rowIdx) => {\n                            return (\n                                <div key={rowIdx} className=\"row\">\n                                    {\n                                        row.map((node, nodeIdx) => {\n                                            const { row, col, isFinish, isStart, isWall } = node;\n                                            return (\n                                                <Node\n                                                    key={nodeIdx}\n                                                    col={col}\n                                                    isFinish={isFinish}\n                                                    isStart={isStart}\n                                                    isWall={isWall}\n                                                    mousePressed={mousePressed}\n                                                    onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                                                    onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\n                                                    onMouseUp={() => this.handleMouseUp()}\n                                                    row={row}>\n                                                </Node>\n                                            );\n                                        })}\n                                </div>\n                            );\n                        })}\n                </div>\n            </>\n        );\n    }\n}","import MainComponent from './components/MainComponent';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainComponent/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}